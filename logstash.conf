input {
  file {
    path => "C:/117170/logs/**/avro*.log"
	start_position => "beginning"
	type => zeusApp
    codec => multiline {
      pattern => "^(%{TIMESTAMP_ISO8601})"
#      pattern => "^(\s+|\t)|(Caused by:)"
      negate => true
      what => "previous"
	  auto_flush_interval => 2
    }
  }
}

filter {
  if [message] =~ "\tat" {
    grok {
#      match => ["message", "^(\tat)"]
#	  match => ["message", "%{TIMESTAMP_ISO8601:error_ts} %{LOGLEVEL:level} %{NUMBER:pid} --- .+? %{JAVACLASS:class}: (?<msg>.+?(?=(\r\n|\r|\n)))"]
      match => ["message", "%{TIMESTAMP_ISO8601:error_ts} %{LOGLEVEL:level} %{NUMBER:pid} --- .+? %{JAVACLASS:class}"]
      add_tag => ["stacktrace"]
    }
  }else{
	  grok {
		match => [ "message", 
				   "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- \[(?<thread>[A-Za-z0-9-]+)\] [A-Za-z0-9.]*\.(?<class>[A-Za-z0-9#_]+)\s*:\s+(?<logmessage>.*)",
				   "message",
				   "(?<timestamp>%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME})  %{LOGLEVEL:level} %{NUMBER:pid} --- .+? :\s+(?<logmessage>.*)"
				 ]
	  }
}
  
  
  date {
    match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss.SSS" ]
  }
  
#  mutate {
#    remove_field => ["message"]
#  }
}

output {
  stdout {
    codec => rubydebug
  }
  elasticsearch{
	hosts => ["http://localhost:9200"]
	index => "consumerlog"
  }
}